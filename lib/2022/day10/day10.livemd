<!-- livebook:{"persist_outputs":true} -->

# Advent of code - day 10

## Testing input

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
test_input = File.read!("/advent-of-code/data/lib/2022/day10/test_input")
```

<!-- livebook:{"output":true} -->

```
"addx 15\naddx -11\naddx 6\naddx -3\naddx 5\naddx -1\naddx -8\naddx 13\naddx 4\nnoop\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx -35\naddx 1\naddx 24\naddx -19\naddx 1\naddx 16\naddx -11\nnoop\nnoop\naddx 21\naddx -15\nnoop\nnoop\naddx -3\naddx 9\naddx 1\naddx -3\naddx 8\naddx 1\naddx 5\nnoop\nnoop\nnoop\nnoop\nnoop\naddx -36\nnoop\naddx 1\naddx 7\nnoop\nnoop\nnoop\naddx 2\naddx 6\nnoop\nnoop\nnoop\nnoop\nnoop\naddx 1\nnoop\nnoop\naddx 7\naddx 1\nnoop\naddx -13\naddx 13\naddx 7\nnoop\naddx 1\naddx -33\nnoop\nnoop\nnoop\naddx 2\nnoop\nnoop\nnoop\naddx 8\nnoop\naddx -1\naddx 2\naddx 1\nnoop\naddx 17\naddx -9\naddx 1\naddx 1\naddx -3\naddx 11\nnoop\nnoop\naddx 1\nnoop\naddx 1\nnoop\nnoop\naddx -13\naddx -19\naddx 1\naddx 3\naddx 26\naddx -30\naddx 12\naddx -1\naddx 3\naddx 1\nnoop\nnoop\nnoop\naddx -9\naddx 18\naddx 1\naddx 2\nnoop\nnoop\naddx 9\nnoop\nnoop\nnoop\naddx -1\naddx 2\naddx -37\naddx 1\naddx 3\nnoop\naddx 15\naddx -21\naddx 22\naddx -6\naddx 1\nnoop\naddx 2\naddx 1\nnoop\naddx -10\nnoop\nnoop\naddx 20\naddx 1\naddx 2\naddx 2\naddx -6\naddx -11\nnoop\nnoop\nnoop\n"
```

## First star impl

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule CathodeRayTube do
  def get_signal_strength(input, start \\ 20, finish \\ 220, step \\ 40) do
    input
    |> parse_input()
    |> get_cycles_and_instructions(start, finish, step)
  end

  def parse_input(input), do: String.split(input, "\n", trim: true)

  defp get_cycles_and_instructions(parsed_input, start, finish, step) do
    parsed_input
    |> parse_instructions()
    |> Stream.filter(fn {_register_value, pc} -> pc in start..finish//step end)
    |> Stream.map(fn {register_value, pc} -> pc * register_value end)
    |> Enum.sum()
  end

  def parse_instructions(instructions) do
    Stream.transform(instructions, {1, 1}, fn
      "noop", {register, pc} ->
        {[{register, pc}], {register, pc + 1}}

      "addx " <> instr_cycles, {register, pc} ->
        {[{register, pc}, {register, pc + 1}],
         {register + String.to_integer(instr_cycles), pc + 2}}
    end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, CathodeRayTube, <<70, 79, 82, 49, 0, 0, 15, ...>>, {:parse_instructions, 1}}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
CathodeRayTube.get_signal_strength("noop\naddx 3\naddx -5\n")
```

<!-- livebook:{"output":true} -->

```
0
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
CathodeRayTube.get_signal_strength(test_input)
```

<!-- livebook:{"output":true} -->

```
13140
```

## Real input

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = File.read!("/advent-of-code/data/lib/2022/day10/real_input")
```

<!-- livebook:{"output":true} -->

```
"addx 2\naddx 3\naddx 1\nnoop\naddx 4\nnoop\nnoop\nnoop\naddx 5\nnoop\naddx 1\naddx 4\naddx -2\naddx 3\naddx 5\naddx -1\naddx 5\naddx 3\naddx -2\naddx 4\nnoop\nnoop\nnoop\naddx -27\naddx -5\naddx 2\naddx -7\naddx 3\naddx 7\naddx 5\naddx 2\naddx 5\nnoop\nnoop\naddx -2\nnoop\naddx 3\naddx 2\naddx 5\naddx 2\naddx 3\nnoop\naddx 2\naddx -29\naddx 30\naddx -26\naddx -10\nnoop\naddx 5\nnoop\naddx 18\naddx -13\nnoop\nnoop\naddx 5\nnoop\nnoop\naddx 5\nnoop\nnoop\nnoop\naddx 1\naddx 2\naddx 7\nnoop\nnoop\naddx 3\nnoop\naddx 2\naddx 3\nnoop\naddx -37\nnoop\naddx 16\naddx -12\naddx 29\naddx -16\naddx -10\naddx 5\naddx 2\naddx -11\naddx 11\naddx 3\naddx 5\naddx 2\naddx 2\naddx -1\naddx 2\naddx 5\naddx 2\nnoop\nnoop\nnoop\naddx -37\nnoop\naddx 17\naddx -10\naddx -2\nnoop\naddx 7\naddx 3\nnoop\naddx 2\naddx -10\naddx 22\naddx -9\naddx 5\naddx 2\naddx -5\naddx 6\naddx 2\naddx 5\naddx 2\naddx -28\naddx -7\nnoop\nnoop\naddx 1\naddx 4\naddx 17\naddx -12\nnoop\nnoop\nnoop\nnoop\naddx 5\naddx 6\nnoop\naddx -1\naddx -17\naddx 18\nnoop\naddx 5\nnoop\nnoop\nnoop\naddx 5\naddx 4\naddx -2\nnoop\nnoop\nnoop\nnoop\nnoop\n"
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
CathodeRayTube.get_signal_strength(input)
```

<!-- livebook:{"output":true} -->

```
15680
```

## Second star impl

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule CathodeRayTube2 do
  alias CathodeRayTube

  def get_crt_image(input, width \\ 40) do
    input
    |> CathodeRayTube.parse_input()
    |> CathodeRayTube.parse_instructions()
    |> do_get_crt_image(width)
    |> print_part_two()
  end

  defp do_get_crt_image(parsed_input, width) do
    parsed_input
    |> Enum.chunk_every(width)
    |> Enum.map(fn row ->
      row
      |> Enum.with_index()
      |> Enum.into("", fn
        {{sprite, _pc}, idx} when idx in (sprite - 1)..(sprite + 1) -> "#"
        _ -> "."
      end)
    end)
  end

  def print_part_two(feed) do
    Enum.each(feed, fn line ->
      line
      |> String.graphemes()
      |> Enum.map_join(fn
        "#" -> IO.ANSI.format([:green_background, :green, " "])
        "." -> IO.ANSI.format([:black_background, :black, " "])
      end)
      |> IO.puts()
    end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, CathodeRayTube2, <<70, 79, 82, 49, 0, 0, 15, ...>>, {:print_part_two, 1}}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
CathodeRayTube2.get_crt_image(test_input)
```

<!-- livebook:{"output":true} -->

```
                                        
                                        
                                        
                                        
                                        
                                        
```

<!-- livebook:{"output":true} -->

```
:ok
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
CathodeRayTube2.get_crt_image(input)
```

<!-- livebook:{"output":true} -->

```
                                        
                                        
                                        
                                        
                                        
                                        
```

<!-- livebook:{"output":true} -->

```
:ok
```
