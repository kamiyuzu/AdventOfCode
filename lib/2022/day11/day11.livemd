<!-- livebook:{"persist_outputs":true} -->

# Advent of code - day 11

## Testing input

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
test_input = File.read!("/advent-of-code/data/lib/2022/day11/test_input")
```

<!-- livebook:{"output":true} -->

```
"Monkey 0:\n  Starting items: 79, 98\n  Operation: new = old * 19\n  Test: divisible by 23\n    If true: throw to monkey 2\n    If false: throw to monkey 3\n\nMonkey 1:\n  Starting items: 54, 65, 75, 74\n  Operation: new = old + 6\n  Test: divisible by 19\n    If true: throw to monkey 2\n    If false: throw to monkey 0\n\nMonkey 2:\n  Starting items: 79, 60, 97\n  Operation: new = old * old\n  Test: divisible by 13\n    If true: throw to monkey 1\n    If false: throw to monkey 3\n\nMonkey 3:\n  Starting items: 74\n  Operation: new = old + 3\n  Test: divisible by 17\n    If true: throw to monkey 0\n    If false: throw to monkey 1\n"
```

## First star impl

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule MonkeyInTheMiddle.Logic do
  def get_game_setup(game, monkey_item, monkey_number) do
    case String.split(monkey_item, [":", ","], trim: true) do
      ["Monkey " <> monkey_number] ->
        Map.put(game, "Monkey#{monkey_number}", %{})

      ["  Starting items" | items] ->
        game
        |> put_in(
          ["Monkey#{monkey_number}", Access.key(:items)],
          Stream.map(items, fn item -> item |> String.trim() |> String.to_integer() end)
        )
        |> put_in(
          ["Monkey#{monkey_number}", Access.key(:end_items)],
          :queue.new()
        )
        |> put_in(
          ["Monkey#{monkey_number}", Access.key(:items_inspected)],
          MapSet.new([])
        )
        |> put_in(
          ["Monkey#{monkey_number}", Access.key(:number_items_inspected)],
          0
        )

      ["  Operation", " new = old " <> <<operation::binary-size(1), " ", number::binary>>] ->
        game
        |> put_in(["Monkey#{monkey_number}", Access.key(:operation_number)], number)
        |> put_in(["Monkey#{monkey_number}", Access.key(:operation)], operation)

      ["  Test", " divisible by " <> number] ->
        put_in(
          game,
          ["Monkey#{monkey_number}", Access.key(:divisible_number)],
          String.to_integer(number)
        )

      ["    If true", " throw to monkey " <> monkey_number_true] ->
        put_in(
          game,
          ["Monkey#{monkey_number}", Access.key(:monkey_true)],
          String.to_integer(monkey_number_true)
        )

      ["    If false", " throw to monkey " <> monkey_number_false] ->
        put_in(
          game,
          ["Monkey#{monkey_number}", Access.key(:monkey_false)],
          String.to_integer(monkey_number_false)
        )
    end
  end

  def play(game, monkey, worry \\ 3) do
    monkey_attr = Map.get(game, "Monkey#{monkey}")
    items = Map.get(monkey_attr, :items)
    end_items = monkey_attr |> Map.get(:end_items) |> :queue.to_list()

    game_items =
      items
      |> Enum.reduce(game, fn item, game_acc ->
        operation_number =
          case Map.get(monkey_attr, :operation_number) do
            "old" -> item
            value -> String.to_integer(value)
          end

        worry_lvl =
          apply(Kernel, String.to_existing_atom("#{Map.get(monkey_attr, :operation)}"), [
            item,
            operation_number
          ])

        monkey_to_throw_item =
          if rem(div(worry_lvl, worry), Map.get(monkey_attr, :divisible_number)) == 0 do
            Map.get(monkey_attr, :monkey_true)
          else
            Map.get(monkey_attr, :monkey_false)
          end

        game_acc
        |> update_in(
          ["Monkey#{monkey_to_throw_item}", Access.key(:end_items)],
          &:queue.in(div(worry_lvl, worry), &1)
        )
        |> update_in(
          ["Monkey#{monkey}", Access.key(:items_inspected)],
          &MapSet.put(&1, div(worry_lvl, worry))
        )
        |> update_in(
          ["Monkey#{monkey}", Access.key(:number_items_inspected)],
          &(&1 + 1)
        )
      end)
      |> put_in(["Monkey#{monkey}", :items], [])

    end_items
    |> Enum.reduce(game_items, fn item, game_acc ->
      operation_number =
        case Map.get(monkey_attr, :operation_number) do
          "old" -> item
          value -> String.to_integer(value)
        end

      worry_lvl =
        apply(Kernel, String.to_existing_atom("#{Map.get(monkey_attr, :operation)}"), [
          item,
          operation_number
        ])

      monkey_to_throw_item =
        if rem(div(worry_lvl, worry), Map.get(monkey_attr, :divisible_number)) == 0 do
          Map.get(monkey_attr, :monkey_true)
        else
          Map.get(monkey_attr, :monkey_false)
        end

      game_acc
      |> update_in(
        ["Monkey#{monkey_to_throw_item}", Access.key(:end_items)],
        &:queue.in(div(worry_lvl, worry), &1)
      )
      |> update_in(
        ["Monkey#{monkey}", Access.key(:items_inspected)],
        &MapSet.put(&1, div(worry_lvl, worry))
      )
      |> update_in(
        ["Monkey#{monkey}", Access.key(:number_items_inspected)],
        &(&1 + 1)
      )
    end)
    |> put_in(["Monkey#{monkey}", :end_items], :queue.new())
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, MonkeyInTheMiddle.Logic, <<70, 79, 82, 49, 0, 0, 34, ...>>, {:play, 3}}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule MonkeyInTheMiddle do
  alias MonkeyInTheMiddle.Logic

  def get_monkey_shenanigans(input, rounds \\ 20, worry \\ 3) do
    input
    |> parse_input()
    |> parse_monkeys_actions()
    |> play_monkey_shenanigans_for_rounds(rounds, worry)
  end

  def parse_input(input),
    do:
      input
      |> String.split("\n\n", trim: true)
      |> Enum.with_index(&{&2, String.split(&1, "\n", trim: true)})

  def parse_monkeys_actions(parsed_input) do
    Enum.reduce(parsed_input, %{}, fn {monkey_number, actions}, game ->
      Enum.reduce(actions, game, fn action, game_acc ->
        Logic.get_game_setup(game_acc, action, monkey_number)
      end)
    end)
  end

  def play_monkey_shenanigans_for_rounds(game_setup, rounds, worry) do
    monkeys = game_setup |> Enum.to_list() |> length()

    ended_game =
      Enum.reduce(1..rounds, game_setup, fn round, game ->
        IO.inspect(round)

        Enum.reduce(0..(monkeys - 1), game, fn monkey, game_acc ->
          Logic.play(game_acc, monkey, worry)
        end)
      end)

    {key, attrs} =
      Enum.max_by(ended_game, fn {_monkey, attrs} -> attrs.number_items_inspected end)

    {_, attrs_2} =
      ended_game
      |> Map.delete(key)
      |> Enum.max_by(fn {_monkey, attrs} -> attrs.number_items_inspected end)

    attrs.number_items_inspected * attrs_2.number_items_inspected
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, MonkeyInTheMiddle, <<70, 79, 82, 49, 0, 0, 20, ...>>,
 {:play_monkey_shenanigans_for_rounds, 3}}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
MonkeyInTheMiddle.get_monkey_shenanigans(test_input)
```

<!-- livebook:{"output":true} -->

```
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
```

<!-- livebook:{"output":true} -->

```
10605
```

## Real input

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = File.read!("/advent-of-code/data/lib/2022/day11/real_input")
```

<!-- livebook:{"output":true} -->

```
"Monkey 0:\n  Starting items: 66, 59, 64, 51\n  Operation: new = old * 3\n  Test: divisible by 2\n    If true: throw to monkey 1\n    If false: throw to monkey 4\n\nMonkey 1:\n  Starting items: 67, 61\n  Operation: new = old * 19\n  Test: divisible by 7\n    If true: throw to monkey 3\n    If false: throw to monkey 5\n\nMonkey 2:\n  Starting items: 86, 93, 80, 70, 71, 81, 56\n  Operation: new = old + 2\n  Test: divisible by 11\n    If true: throw to monkey 4\n    If false: throw to monkey 0\n\nMonkey 3:\n  Starting items: 94\n  Operation: new = old * old\n  Test: divisible by 19\n    If true: throw to monkey 7\n    If false: throw to monkey 6\n\nMonkey 4:\n  Starting items: 71, 92, 64\n  Operation: new = old + 8\n  Test: divisible by 3\n    If true: throw to monkey 5\n    If false: throw to monkey 1\n\nMonkey 5:\n  Starting items: 58, 81, 92, 75, 56\n  Operation: new = old + 6\n  Test: divisible by 5\n    If true: throw to monkey 3\n    If false: throw to monkey 6\n\nMonkey 6:\n  Starting items: 82, 98, 77, 94, 86, 81\n  Operation: new = old + 7\n  Test: divisible by 17\n    If true: throw to monkey 7\n    If false: throw to monkey 2\n\nMonkey 7:\n  Starting items: 54, 95, 70, 93, 88, 93, 63, 50\n  Operation: new = old + 4\n  Test: divisible by 13\n    If true: throw to monkey 2\n    If false: throw to monkey 0\n"
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
MonkeyInTheMiddle.get_monkey_shenanigans(input)
```

<!-- livebook:{"output":true} -->

```
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
```

<!-- livebook:{"output":true} -->

```
90294
```

## Second star

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule MonkeyInTheMiddle.Logic2 do
  def get_game_setup(game, monkey_item, monkey_number) do
    case String.split(monkey_item, [":", ","], trim: true) do
      ["Monkey " <> monkey_number] ->
        Map.put(game, "Monkey#{monkey_number}", %{})

      ["  Starting items" | items] ->
        game
        |> put_in(
          ["Monkey#{monkey_number}", Access.key(:items)],
          Enum.map(items, fn item -> item |> String.trim() |> String.to_integer() end)
        )
        |> put_in(
          ["Monkey#{monkey_number}", Access.key(:end_items)],
          :queue.new()
        )
        |> put_in(
          ["Monkey#{monkey_number}", Access.key(:number_items_inspected)],
          0
        )

      ["  Operation", " new = old " <> <<operation::binary-size(1), " ", number::binary>>] ->
        game
        |> put_in(["Monkey#{monkey_number}", Access.key(:operation_number)], number)
        |> put_in(["Monkey#{monkey_number}", Access.key(:operation)], operation)

      ["  Test", " divisible by " <> number] ->
        put_in(
          game,
          ["Monkey#{monkey_number}", Access.key(:divisible_number)],
          String.to_integer(number)
        )

      ["    If true", " throw to monkey " <> monkey_number_true] ->
        put_in(
          game,
          ["Monkey#{monkey_number}", Access.key(:monkey_true)],
          String.to_integer(monkey_number_true)
        )

      ["    If false", " throw to monkey " <> monkey_number_false] ->
        put_in(
          game,
          ["Monkey#{monkey_number}", Access.key(:monkey_false)],
          String.to_integer(monkey_number_false)
        )
    end
  end

  def play(game, monkey, lcm) do
    monkey_attr = Map.get(game, "Monkey#{monkey}")

    game_items =
      monkey_attr
      |> Map.get(:items)
      |> Enum.reduce(game, fn item, game_acc ->
        do_play(monkey, monkey_attr, item, game_acc, lcm)
      end)
      |> put_in(["Monkey#{monkey}", :items], [])

    monkey_attr
    |> Map.get(:end_items)
    |> :queue.to_list()
    |> Enum.reduce(game_items, fn item, game_acc ->
      do_play(monkey, monkey_attr, item, game_acc, lcm)
    end)
    |> put_in(["Monkey#{monkey}", :end_items], :queue.new())
  end

  defp do_play(monkey, monkey_attr, item, game_acc, lcm) do
    operation_number =
      case Map.get(monkey_attr, :operation_number) do
        "old" -> item
        value -> String.to_integer(value)
      end

    worry_lvl =
      apply(Kernel, String.to_existing_atom("#{Map.get(monkey_attr, :operation)}"), [
        item,
        operation_number
      ])

    worry_lvl_mod = rem(worry_lvl, lcm)

    monkey_to_throw_item =
      if rem(worry_lvl_mod, Map.get(monkey_attr, :divisible_number)) == 0 do
        Map.get(monkey_attr, :monkey_true)
      else
        Map.get(monkey_attr, :monkey_false)
      end

    game_acc
    |> update_in(
      ["Monkey#{monkey_to_throw_item}", Access.key(:end_items)],
      &:queue.in(worry_lvl_mod, &1)
    )
    |> update_in(
      ["Monkey#{monkey}", Access.key(:number_items_inspected)],
      &(&1 + 1)
    )
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, MonkeyInTheMiddle.Logic2, <<70, 79, 82, 49, 0, 0, 27, ...>>, {:do_play, 5}}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule MonkeyInTheMiddle2 do
  alias MonkeyInTheMiddle.Logic2

  def get_monkey_shenanigans(input, rounds \\ 10_000) do
    input
    |> parse_input()
    |> parse_monkeys_actions()
    |> play_monkey_shenanigans_for_rounds(rounds)
  end

  def parse_input(input),
    do:
      input
      |> String.split("\n\n", trim: true)
      |> Enum.with_index(&{&2, String.split(&1, "\n", trim: true)})

  def parse_monkeys_actions(parsed_input) do
    Enum.reduce(parsed_input, %{}, fn {monkey_number, actions}, game ->
      Enum.reduce(actions, game, fn action, game_acc ->
        Logic2.get_game_setup(game_acc, action, monkey_number)
      end)
    end)
  end

  def play_monkey_shenanigans_for_rounds(game_setup, rounds) do
    monkeys = game_setup |> Enum.to_list() |> length()

    lcm =
      Enum.reduce(game_setup, 1, fn {_, monkey_attrs}, acc ->
        monkey_attrs.divisible_number * acc
      end)

    ended_game =
      Enum.reduce(1..rounds, game_setup, fn round, game ->
        IO.inspect(round)

        Enum.reduce(0..(monkeys - 1), game, fn monkey, game_acc ->
          Logic2.play(game_acc, monkey, lcm)
        end)
      end)

    {key, attrs} =
      Enum.max_by(ended_game, fn {_monkey, attrs} -> attrs.number_items_inspected end)

    {_, attrs_2} =
      ended_game
      |> Map.delete(key)
      |> Enum.max_by(fn {_monkey, attrs} -> attrs.number_items_inspected end)

    attrs.number_items_inspected * attrs_2.number_items_inspected
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, MonkeyInTheMiddle2, <<70, 79, 82, 49, 0, 0, 21, ...>>,
 {:play_monkey_shenanigans_for_rounds, 2}}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
MonkeyInTheMiddle2.get_monkey_shenanigans(test_input, 10000)
```

<!-- livebook:{"output":true} -->

```
...
9002
9003
9004
9005
9006
9007
9008
9009
9010
9011
9012
9013
9014
9015
9016
9017
9018
9019
9020
9021
9022
9023
9024
9025
9026
9027
9028
9029
9030
9031
9032
9033
9034
9035
9036
9037
9038
9039
9040
9041
9042
9043
9044
9045
9046
9047
9048
9049
9050
9051
9052
9053
9054
9055
9056
9057
9058
9059
9060
9061
9062
9063
9064
9065
9066
9067
9068
9069
9070
9071
9072
9073
9074
9075
9076
9077
9078
9079
9080
9081
9082
9083
9084
9085
9086
9087
9088
9089
9090
9091
9092
9093
9094
9095
9096
9097
9098
9099
9100
9101
9102
9103
9104
9105
9106
9107
9108
9109
9110
9111
9112
9113
9114
9115
9116
9117
9118
9119
9120
9121
9122
9123
9124
9125
9126
9127
9128
9129
9130
9131
9132
9133
9134
9135
9136
9137
9138
9139
9140
9141
9142
9143
9144
9145
9146
9147
9148
9149
9150
9151
9152
9153
9154
9155
9156
9157
9158
9159
9160
9161
9162
9163
9164
9165
9166
9167
9168
9169
9170
9171
9172
9173
9174
9175
9176
9177
9178
9179
9180
9181
9182
9183
9184
9185
9186
9187
9188
9189
9190
9191
9192
9193
9194
9195
9196
9197
9198
9199
9200
9201
9202
9203
9204
9205
9206
9207
9208
9209
9210
9211
9212
9213
9214
9215
9216
9217
9218
9219
9220
9221
9222
9223
9224
9225
9226
9227
9228
9229
9230
9231
9232
9233
9234
9235
9236
9237
9238
9239
9240
9241
9242
9243
9244
9245
9246
9247
9248
9249
9250
9251
9252
9253
9254
9255
9256
9257
9258
9259
9260
9261
9262
9263
9264
9265
9266
9267
9268
9269
9270
9271
9272
9273
9274
9275
9276
9277
9278
9279
9280
9281
9282
9283
9284
9285
9286
9287
9288
9289
9290
9291
9292
9293
9294
9295
9296
9297
9298
9299
9300
9301
9302
9303
9304
9305
9306
9307
9308
9309
9310
9311
9312
9313
9314
9315
9316
9317
9318
9319
9320
9321
9322
9323
9324
9325
9326
9327
9328
9329
9330
9331
9332
9333
9334
9335
9336
9337
9338
9339
9340
9341
9342
9343
9344
9345
9346
9347
9348
9349
9350
9351
9352
9353
9354
9355
9356
9357
9358
9359
9360
9361
9362
9363
9364
9365
9366
9367
9368
9369
9370
9371
9372
9373
9374
9375
9376
9377
9378
9379
9380
9381
9382
9383
9384
9385
9386
9387
9388
9389
9390
9391
9392
9393
9394
9395
9396
9397
9398
9399
9400
9401
9402
9403
9404
9405
9406
9407
9408
9409
9410
9411
9412
9413
9414
9415
9416
9417
9418
9419
9420
9421
9422
9423
9424
9425
9426
9427
9428
9429
9430
9431
9432
9433
9434
9435
9436
9437
9438
9439
9440
9441
9442
9443
9444
9445
9446
9447
9448
9449
9450
9451
9452
9453
9454
9455
9456
9457
9458
9459
9460
9461
9462
9463
9464
9465
9466
9467
9468
9469
9470
9471
9472
9473
9474
9475
9476
9477
9478
9479
9480
9481
9482
9483
9484
9485
9486
9487
9488
9489
9490
9491
9492
9493
9494
9495
9496
9497
9498
9499
9500
9501
9502
9503
9504
9505
9506
9507
9508
9509
9510
9511
9512
9513
9514
9515
9516
9517
9518
9519
9520
9521
9522
9523
9524
9525
9526
9527
9528
9529
9530
9531
9532
9533
9534
9535
9536
9537
9538
9539
9540
9541
9542
9543
9544
9545
9546
9547
9548
9549
9550
9551
9552
9553
9554
9555
9556
9557
9558
9559
9560
9561
9562
9563
9564
9565
9566
9567
9568
9569
9570
9571
9572
9573
9574
9575
9576
9577
9578
9579
9580
9581
9582
9583
9584
9585
9586
9587
9588
9589
9590
9591
9592
9593
9594
9595
9596
9597
9598
9599
9600
9601
9602
9603
9604
9605
9606
9607
9608
9609
9610
9611
9612
9613
9614
9615
9616
9617
9618
9619
9620
9621
9622
9623
9624
9625
9626
9627
9628
9629
9630
9631
9632
9633
9634
9635
9636
9637
9638
9639
9640
9641
9642
9643
9644
9645
9646
9647
9648
9649
9650
9651
9652
9653
9654
9655
9656
9657
9658
9659
9660
9661
9662
9663
9664
9665
9666
9667
9668
9669
9670
9671
9672
9673
9674
9675
9676
9677
9678
9679
9680
9681
9682
9683
9684
9685
9686
9687
9688
9689
9690
9691
9692
9693
9694
9695
9696
9697
9698
9699
9700
9701
9702
9703
9704
9705
9706
9707
9708
9709
9710
9711
9712
9713
9714
9715
9716
9717
9718
9719
9720
9721
9722
9723
9724
9725
9726
9727
9728
9729
9730
9731
9732
9733
9734
9735
9736
9737
9738
9739
9740
9741
9742
9743
9744
9745
9746
9747
9748
9749
9750
9751
9752
9753
9754
9755
9756
9757
9758
9759
9760
9761
9762
9763
9764
9765
9766
9767
9768
9769
9770
9771
9772
9773
9774
9775
9776
9777
9778
9779
9780
9781
9782
9783
9784
9785
9786
9787
9788
9789
9790
9791
9792
9793
9794
9795
9796
9797
9798
9799
9800
9801
9802
9803
9804
9805
9806
9807
9808
9809
9810
9811
9812
9813
9814
9815
9816
9817
9818
9819
9820
9821
9822
9823
9824
9825
9826
9827
9828
9829
9830
9831
9832
9833
9834
9835
9836
9837
9838
9839
9840
9841
9842
9843
9844
9845
9846
9847
9848
9849
9850
9851
9852
9853
9854
9855
9856
9857
9858
9859
9860
9861
9862
9863
9864
9865
9866
9867
9868
9869
9870
9871
9872
9873
9874
9875
9876
9877
9878
9879
9880
9881
9882
9883
9884
9885
9886
9887
9888
9889
9890
9891
9892
9893
9894
9895
9896
9897
9898
9899
9900
9901
9902
9903
9904
9905
9906
9907
9908
9909
9910
9911
9912
9913
9914
9915
9916
9917
9918
9919
9920
9921
9922
9923
9924
9925
9926
9927
9928
9929
9930
9931
9932
9933
9934
9935
9936
9937
9938
9939
9940
9941
9942
9943
9944
9945
9946
9947
9948
9949
9950
9951
9952
9953
9954
9955
9956
9957
9958
9959
9960
9961
9962
9963
9964
9965
9966
9967
9968
9969
9970
9971
9972
9973
9974
9975
9976
9977
9978
9979
9980
9981
9982
9983
9984
9985
9986
9987
9988
9989
9990
9991
9992
9993
9994
9995
9996
9997
9998
9999
10000
```

<!-- livebook:{"output":true} -->

```
2713310158
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
MonkeyInTheMiddle2.get_monkey_shenanigans(input, 10000)
```

<!-- livebook:{"output":true} -->

```
...
9002
9003
9004
9005
9006
9007
9008
9009
9010
9011
9012
9013
9014
9015
9016
9017
9018
9019
9020
9021
9022
9023
9024
9025
9026
9027
9028
9029
9030
9031
9032
9033
9034
9035
9036
9037
9038
9039
9040
9041
9042
9043
9044
9045
9046
9047
9048
9049
9050
9051
9052
9053
9054
9055
9056
9057
9058
9059
9060
9061
9062
9063
9064
9065
9066
9067
9068
9069
9070
9071
9072
9073
9074
9075
9076
9077
9078
9079
9080
9081
9082
9083
9084
9085
9086
9087
9088
9089
9090
9091
9092
9093
9094
9095
9096
9097
9098
9099
9100
9101
9102
9103
9104
9105
9106
9107
9108
9109
9110
9111
9112
9113
9114
9115
9116
9117
9118
9119
9120
9121
9122
9123
9124
9125
9126
9127
9128
9129
9130
9131
9132
9133
9134
9135
9136
9137
9138
9139
9140
9141
9142
9143
9144
9145
9146
9147
9148
9149
9150
9151
9152
9153
9154
9155
9156
9157
9158
9159
9160
9161
9162
9163
9164
9165
9166
9167
9168
9169
9170
9171
9172
9173
9174
9175
9176
9177
9178
9179
9180
9181
9182
9183
9184
9185
9186
9187
9188
9189
9190
9191
9192
9193
9194
9195
9196
9197
9198
9199
9200
9201
9202
9203
9204
9205
9206
9207
9208
9209
9210
9211
9212
9213
9214
9215
9216
9217
9218
9219
9220
9221
9222
9223
9224
9225
9226
9227
9228
9229
9230
9231
9232
9233
9234
9235
9236
9237
9238
9239
9240
9241
9242
9243
9244
9245
9246
9247
9248
9249
9250
9251
9252
9253
9254
9255
9256
9257
9258
9259
9260
9261
9262
9263
9264
9265
9266
9267
9268
9269
9270
9271
9272
9273
9274
9275
9276
9277
9278
9279
9280
9281
9282
9283
9284
9285
9286
9287
9288
9289
9290
9291
9292
9293
9294
9295
9296
9297
9298
9299
9300
9301
9302
9303
9304
9305
9306
9307
9308
9309
9310
9311
9312
9313
9314
9315
9316
9317
9318
9319
9320
9321
9322
9323
9324
9325
9326
9327
9328
9329
9330
9331
9332
9333
9334
9335
9336
9337
9338
9339
9340
9341
9342
9343
9344
9345
9346
9347
9348
9349
9350
9351
9352
9353
9354
9355
9356
9357
9358
9359
9360
9361
9362
9363
9364
9365
9366
9367
9368
9369
9370
9371
9372
9373
9374
9375
9376
9377
9378
9379
9380
9381
9382
9383
9384
9385
9386
9387
9388
9389
9390
9391
9392
9393
9394
9395
9396
9397
9398
9399
9400
9401
9402
9403
9404
9405
9406
9407
9408
9409
9410
9411
9412
9413
9414
9415
9416
9417
9418
9419
9420
9421
9422
9423
9424
9425
9426
9427
9428
9429
9430
9431
9432
9433
9434
9435
9436
9437
9438
9439
9440
9441
9442
9443
9444
9445
9446
9447
9448
9449
9450
9451
9452
9453
9454
9455
9456
9457
9458
9459
9460
9461
9462
9463
9464
9465
9466
9467
9468
9469
9470
9471
9472
9473
9474
9475
9476
9477
9478
9479
9480
9481
9482
9483
9484
9485
9486
9487
9488
9489
9490
9491
9492
9493
9494
9495
9496
9497
9498
9499
9500
9501
9502
9503
9504
9505
9506
9507
9508
9509
9510
9511
9512
9513
9514
9515
9516
9517
9518
9519
9520
9521
9522
9523
9524
9525
9526
9527
9528
9529
9530
9531
9532
9533
9534
9535
9536
9537
9538
9539
9540
9541
9542
9543
9544
9545
9546
9547
9548
9549
9550
9551
9552
9553
9554
9555
9556
9557
9558
9559
9560
9561
9562
9563
9564
9565
9566
9567
9568
9569
9570
9571
9572
9573
9574
9575
9576
9577
9578
9579
9580
9581
9582
9583
9584
9585
9586
9587
9588
9589
9590
9591
9592
9593
9594
9595
9596
9597
9598
9599
9600
9601
9602
9603
9604
9605
9606
9607
9608
9609
9610
9611
9612
9613
9614
9615
9616
9617
9618
9619
9620
9621
9622
9623
9624
9625
9626
9627
9628
9629
9630
9631
9632
9633
9634
9635
9636
9637
9638
9639
9640
9641
9642
9643
9644
9645
9646
9647
9648
9649
9650
9651
9652
9653
9654
9655
9656
9657
9658
9659
9660
9661
9662
9663
9664
9665
9666
9667
9668
9669
9670
9671
9672
9673
9674
9675
9676
9677
9678
9679
9680
9681
9682
9683
9684
9685
9686
9687
9688
9689
9690
9691
9692
9693
9694
9695
9696
9697
9698
9699
9700
9701
9702
9703
9704
9705
9706
9707
9708
9709
9710
9711
9712
9713
9714
9715
9716
9717
9718
9719
9720
9721
9722
9723
9724
9725
9726
9727
9728
9729
9730
9731
9732
9733
9734
9735
9736
9737
9738
9739
9740
9741
9742
9743
9744
9745
9746
9747
9748
9749
9750
9751
9752
9753
9754
9755
9756
9757
9758
9759
9760
9761
9762
9763
9764
9765
9766
9767
9768
9769
9770
9771
9772
9773
9774
9775
9776
9777
9778
9779
9780
9781
9782
9783
9784
9785
9786
9787
9788
9789
9790
9791
9792
9793
9794
9795
9796
9797
9798
9799
9800
9801
9802
9803
9804
9805
9806
9807
9808
9809
9810
9811
9812
9813
9814
9815
9816
9817
9818
9819
9820
9821
9822
9823
9824
9825
9826
9827
9828
9829
9830
9831
9832
9833
9834
9835
9836
9837
9838
9839
9840
9841
9842
9843
9844
9845
9846
9847
9848
9849
9850
9851
9852
9853
9854
9855
9856
9857
9858
9859
9860
9861
9862
9863
9864
9865
9866
9867
9868
9869
9870
9871
9872
9873
9874
9875
9876
9877
9878
9879
9880
9881
9882
9883
9884
9885
9886
9887
9888
9889
9890
9891
9892
9893
9894
9895
9896
9897
9898
9899
9900
9901
9902
9903
9904
9905
9906
9907
9908
9909
9910
9911
9912
9913
9914
9915
9916
9917
9918
9919
9920
9921
9922
9923
9924
9925
9926
9927
9928
9929
9930
9931
9932
9933
9934
9935
9936
9937
9938
9939
9940
9941
9942
9943
9944
9945
9946
9947
9948
9949
9950
9951
9952
9953
9954
9955
9956
9957
9958
9959
9960
9961
9962
9963
9964
9965
9966
9967
9968
9969
9970
9971
9972
9973
9974
9975
9976
9977
9978
9979
9980
9981
9982
9983
9984
9985
9986
9987
9988
9989
9990
9991
9992
9993
9994
9995
9996
9997
9998
9999
10000
```

<!-- livebook:{"output":true} -->

```
18170818354
```
